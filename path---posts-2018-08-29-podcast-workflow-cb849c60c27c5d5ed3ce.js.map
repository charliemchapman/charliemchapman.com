{"version":3,"sources":["webpack:///path---posts-2018-08-29-podcast-workflow-cb849c60c27c5d5ed3ce.js","webpack:///./.cache/json/posts-2018-08-29-podcast-workflow.json"],"names":["webpackJsonp","380","module","exports","data","markdownRemark","frontmatter","title","date","image","fields","slug","html","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,aAAeC,MAAA,2CAAAC,KAAA,kBAAAC,MAAA,+PAAkVC,QAAWC,KAAA,uCAA6CC,KAAA,kiJAAwoJC,aAAgBF,KAAA","file":"path---posts-2018-08-29-podcast-workflow-cb849c60c27c5d5ed3ce.js","sourcesContent":["webpackJsonp([41522867867474],{\n\n/***/ 380:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"frontmatter\":{\"title\":\"How You Can (Do) TURTLE Almost Instantly\",\"date\":\"29 August, 2018\",\"image\":\"https://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjdvMuu5ZjdAhUvneAKHVnIDkAQjRx6BAgBEAU&url=https%3A%2F%2Fknowyourmeme.com%2Fmemes%2Fcultures%2Fpodcasting&psig=AOvVaw0M9VWDhlXPmLuiGl56TWJW&ust=1535856475032742\"},\"fields\":{\"slug\":\"/posts/2018/08/29/podcast-workflow/\"},\"html\":\"<p>Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor.</p>\\n<ul>\\n<li>\\n<p>Type some Markdown on the left</p>\\n</li>\\n<li>\\n<p>See HTML in the right</p>\\n</li>\\n<li>\\n<p>Magic</p>\\n</li>\\n<li>\\n<p>Import a HTML file and watch it magically convert to Markdown</p>\\n</li>\\n<li>\\n<p>Drag and drop images (requires your Dropbox account be linked)</p>\\n</li>\\n</ul>\\n<p>You can also:</p>\\n<ul>\\n<li>Import and save files from GitHub, Dropbox, Google Drive and One Drive</li>\\n<li>Drag and drop markdown and HTML files into Dillinger</li>\\n<li>Export documents as Markdown, HTML and PDF</li>\\n</ul>\\n<p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As [John Gruber] writes on the <a href=\\\"\\\">Markdown site</a></p>\\n<blockquote>\\n<p>The overriding design goal for Markdown's\\nformatting syntax is to make it as readable\\nas possible. The idea is that a\\nMarkdown-formatted document should be\\npublishable as-is, as plain text, without\\nlooking like it's been marked up with tags\\nor formatting instructions.</p>\\n</blockquote>\\n<p>This text you see here is <em>actually</em> written in Markdown! To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.</p>\\n<p>Dillinger uses a number of open source projects to work properly:</p>\\n<ul>\\n<li>[AngularJS] - HTML enhanced for web apps!</li>\\n<li>[Ace Editor] - awesome web-based text editor</li>\\n<li>[markdown-it] - Markdown parser done right. Fast and easy to extend.</li>\\n<li>[Twitter Bootstrap] - great UI boilerplate for modern web apps</li>\\n<li>[node.js] - evented I/O for the backend</li>\\n<li>[Express] - fast node.js network app framework [@tjholowaychuk]</li>\\n<li>[Gulp] - the streaming build system</li>\\n<li><a href=\\\"http://breakdance.io\\\">Breakdance</a> - HTML to Markdown converter</li>\\n<li>[jQuery] - duh</li>\\n</ul>\\n<p>And of course Dillinger itself is open source with a <a href=\\\"\\\">public repository</a>\\non GitHub.</p>\\n<p>Dillinger requires <a href=\\\"https://nodejs.org/\\\">Node.js</a> v4+ to run.</p>\\n<p>Install the dependencies and devDependencies and start the server.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ cd dillinger\\n$ npm install -d\\n$ node app</code></pre>\\n      </div>\\n<p>For production environments...</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> cookie <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">92</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">eat</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>food<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> cookie <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>Plugins</h3>\\n<p>Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.</p>\\n<h3>Development</h3>\\n<p>Want to contribute? Great!</p>\\n<p>Dillinger uses Gulp + Webpack for fast developing.\\nMake a change in your file and instantanously see your updates!</p>\\n<p>Open your favorite Terminal and run these commands.</p>\\n<p>First Tab:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ node app</code></pre>\\n      </div>\\n<p>Second Tab:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ gulp watch</code></pre>\\n      </div>\\n<p>(optional) Third:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ karma test</code></pre>\\n      </div>\\n<h4>Building for source</h4>\\n<p>For production release:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ gulp build --prod</code></pre>\\n      </div>\\n<p>Generating pre-built zip archives for distribution:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ gulp build dist --prod</code></pre>\\n      </div>\"}},\"pathContext\":{\"slug\":\"/posts/2018/08/29/podcast-workflow/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2018-08-29-podcast-workflow-cb849c60c27c5d5ed3ce.js","module.exports = {\"data\":{\"markdownRemark\":{\"frontmatter\":{\"title\":\"How You Can (Do) TURTLE Almost Instantly\",\"date\":\"29 August, 2018\",\"image\":\"https://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjdvMuu5ZjdAhUvneAKHVnIDkAQjRx6BAgBEAU&url=https%3A%2F%2Fknowyourmeme.com%2Fmemes%2Fcultures%2Fpodcasting&psig=AOvVaw0M9VWDhlXPmLuiGl56TWJW&ust=1535856475032742\"},\"fields\":{\"slug\":\"/posts/2018/08/29/podcast-workflow/\"},\"html\":\"<p>Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor.</p>\\n<ul>\\n<li>\\n<p>Type some Markdown on the left</p>\\n</li>\\n<li>\\n<p>See HTML in the right</p>\\n</li>\\n<li>\\n<p>Magic</p>\\n</li>\\n<li>\\n<p>Import a HTML file and watch it magically convert to Markdown</p>\\n</li>\\n<li>\\n<p>Drag and drop images (requires your Dropbox account be linked)</p>\\n</li>\\n</ul>\\n<p>You can also:</p>\\n<ul>\\n<li>Import and save files from GitHub, Dropbox, Google Drive and One Drive</li>\\n<li>Drag and drop markdown and HTML files into Dillinger</li>\\n<li>Export documents as Markdown, HTML and PDF</li>\\n</ul>\\n<p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As [John Gruber] writes on the <a href=\\\"\\\">Markdown site</a></p>\\n<blockquote>\\n<p>The overriding design goal for Markdown's\\nformatting syntax is to make it as readable\\nas possible. The idea is that a\\nMarkdown-formatted document should be\\npublishable as-is, as plain text, without\\nlooking like it's been marked up with tags\\nor formatting instructions.</p>\\n</blockquote>\\n<p>This text you see here is <em>actually</em> written in Markdown! To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.</p>\\n<p>Dillinger uses a number of open source projects to work properly:</p>\\n<ul>\\n<li>[AngularJS] - HTML enhanced for web apps!</li>\\n<li>[Ace Editor] - awesome web-based text editor</li>\\n<li>[markdown-it] - Markdown parser done right. Fast and easy to extend.</li>\\n<li>[Twitter Bootstrap] - great UI boilerplate for modern web apps</li>\\n<li>[node.js] - evented I/O for the backend</li>\\n<li>[Express] - fast node.js network app framework [@tjholowaychuk]</li>\\n<li>[Gulp] - the streaming build system</li>\\n<li><a href=\\\"http://breakdance.io\\\">Breakdance</a> - HTML to Markdown converter</li>\\n<li>[jQuery] - duh</li>\\n</ul>\\n<p>And of course Dillinger itself is open source with a <a href=\\\"\\\">public repository</a>\\non GitHub.</p>\\n<p>Dillinger requires <a href=\\\"https://nodejs.org/\\\">Node.js</a> v4+ to run.</p>\\n<p>Install the dependencies and devDependencies and start the server.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ cd dillinger\\n$ npm install -d\\n$ node app</code></pre>\\n      </div>\\n<p>For production environments...</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> cookie <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">92</span> <span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">eat</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>food<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> cookie <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>Plugins</h3>\\n<p>Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.</p>\\n<h3>Development</h3>\\n<p>Want to contribute? Great!</p>\\n<p>Dillinger uses Gulp + Webpack for fast developing.\\nMake a change in your file and instantanously see your updates!</p>\\n<p>Open your favorite Terminal and run these commands.</p>\\n<p>First Tab:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ node app</code></pre>\\n      </div>\\n<p>Second Tab:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ gulp watch</code></pre>\\n      </div>\\n<p>(optional) Third:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ karma test</code></pre>\\n      </div>\\n<h4>Building for source</h4>\\n<p>For production release:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ gulp build --prod</code></pre>\\n      </div>\\n<p>Generating pre-built zip archives for distribution:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"sh\\\">\\n      <pre class=\\\"language-sh\\\"><code class=\\\"language-sh\\\">$ gulp build dist --prod</code></pre>\\n      </div>\"}},\"pathContext\":{\"slug\":\"/posts/2018/08/29/podcast-workflow/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2018-08-29-podcast-workflow.json\n// module id = 380\n// module chunks = 41522867867474"],"sourceRoot":""}